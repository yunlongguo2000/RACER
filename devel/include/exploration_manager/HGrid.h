// Generated by gencpp from file exploration_manager/HGrid.msg
// DO NOT EDIT!


#ifndef EXPLORATION_MANAGER_MESSAGE_HGRID_H
#define EXPLORATION_MANAGER_MESSAGE_HGRID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace exploration_manager
{
template <class ContainerAllocator>
struct HGrid_
{
  typedef HGrid_<ContainerAllocator> Type;

  HGrid_()
    : stamp(0.0)
    , points1()
    , points2()  {
    }
  HGrid_(const ContainerAllocator& _alloc)
    : stamp(0.0)
    , points1(_alloc)
    , points2(_alloc)  {
  (void)_alloc;
    }



   typedef double _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points1_type;
  _points1_type points1;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points2_type;
  _points2_type points2;





  typedef boost::shared_ptr< ::exploration_manager::HGrid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exploration_manager::HGrid_<ContainerAllocator> const> ConstPtr;

}; // struct HGrid_

typedef ::exploration_manager::HGrid_<std::allocator<void> > HGrid;

typedef boost::shared_ptr< ::exploration_manager::HGrid > HGridPtr;
typedef boost::shared_ptr< ::exploration_manager::HGrid const> HGridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exploration_manager::HGrid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exploration_manager::HGrid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exploration_manager::HGrid_<ContainerAllocator1> & lhs, const ::exploration_manager::HGrid_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.points1 == rhs.points1 &&
    lhs.points2 == rhs.points2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exploration_manager::HGrid_<ContainerAllocator1> & lhs, const ::exploration_manager::HGrid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exploration_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exploration_manager::HGrid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_manager::HGrid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exploration_manager::HGrid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exploration_manager::HGrid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_manager::HGrid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_manager::HGrid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exploration_manager::HGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b4c53f50ed104410c54e07de27d9dc1";
  }

  static const char* value(const ::exploration_manager::HGrid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b4c53f50ed10441ULL;
  static const uint64_t static_value2 = 0x0c54e07de27d9dc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::exploration_manager::HGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exploration_manager/HGrid";
  }

  static const char* value(const ::exploration_manager::HGrid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exploration_manager::HGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 stamp\n"
"geometry_msgs/Point[] points1\n"
"geometry_msgs/Point[] points2\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::exploration_manager::HGrid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exploration_manager::HGrid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.points1);
      stream.next(m.points2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HGrid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exploration_manager::HGrid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exploration_manager::HGrid_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<double>::stream(s, indent + "  ", v.stamp);
    s << indent << "points1[]" << std::endl;
    for (size_t i = 0; i < v.points1.size(); ++i)
    {
      s << indent << "  points1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points1[i]);
    }
    s << indent << "points2[]" << std::endl;
    for (size_t i = 0; i < v.points2.size(); ++i)
    {
      s << indent << "  points2[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPLORATION_MANAGER_MESSAGE_HGRID_H
