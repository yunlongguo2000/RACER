// Generated by gencpp from file exploration_manager/GridTour.msg
// DO NOT EDIT!


#ifndef EXPLORATION_MANAGER_MESSAGE_GRIDTOUR_H
#define EXPLORATION_MANAGER_MESSAGE_GRIDTOUR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace exploration_manager
{
template <class ContainerAllocator>
struct GridTour_
{
  typedef GridTour_<ContainerAllocator> Type;

  GridTour_()
    : stamp(0.0)
    , drone_id(0)
    , points()  {
    }
  GridTour_(const ContainerAllocator& _alloc)
    : stamp(0.0)
    , drone_id(0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef double _stamp_type;
  _stamp_type stamp;

   typedef int32_t _drone_id_type;
  _drone_id_type drone_id;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::exploration_manager::GridTour_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exploration_manager::GridTour_<ContainerAllocator> const> ConstPtr;

}; // struct GridTour_

typedef ::exploration_manager::GridTour_<std::allocator<void> > GridTour;

typedef boost::shared_ptr< ::exploration_manager::GridTour > GridTourPtr;
typedef boost::shared_ptr< ::exploration_manager::GridTour const> GridTourConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exploration_manager::GridTour_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exploration_manager::GridTour_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exploration_manager::GridTour_<ContainerAllocator1> & lhs, const ::exploration_manager::GridTour_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.drone_id == rhs.drone_id &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exploration_manager::GridTour_<ContainerAllocator1> & lhs, const ::exploration_manager::GridTour_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exploration_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exploration_manager::GridTour_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exploration_manager::GridTour_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exploration_manager::GridTour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exploration_manager::GridTour_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_manager::GridTour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exploration_manager::GridTour_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exploration_manager::GridTour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b83e54ce12aaeecd7147b77f7a94a9eb";
  }

  static const char* value(const ::exploration_manager::GridTour_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb83e54ce12aaeecdULL;
  static const uint64_t static_value2 = 0x7147b77f7a94a9ebULL;
};

template<class ContainerAllocator>
struct DataType< ::exploration_manager::GridTour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exploration_manager/GridTour";
  }

  static const char* value(const ::exploration_manager::GridTour_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exploration_manager::GridTour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 stamp\n"
"int32 drone_id\n"
"\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::exploration_manager::GridTour_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exploration_manager::GridTour_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.drone_id);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GridTour_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exploration_manager::GridTour_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exploration_manager::GridTour_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<double>::stream(s, indent + "  ", v.stamp);
    s << indent << "drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPLORATION_MANAGER_MESSAGE_GRIDTOUR_H
