// Generated by gencpp from file lkh_mtsp_solver/SolveMTSPRequest.msg
// DO NOT EDIT!


#ifndef LKH_MTSP_SOLVER_MESSAGE_SOLVEMTSPREQUEST_H
#define LKH_MTSP_SOLVER_MESSAGE_SOLVEMTSPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lkh_mtsp_solver
{
template <class ContainerAllocator>
struct SolveMTSPRequest_
{
  typedef SolveMTSPRequest_<ContainerAllocator> Type;

  SolveMTSPRequest_()
    : prob(0)  {
    }
  SolveMTSPRequest_(const ContainerAllocator& _alloc)
    : prob(0)  {
  (void)_alloc;
    }



   typedef uint8_t _prob_type;
  _prob_type prob;





  typedef boost::shared_ptr< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SolveMTSPRequest_

typedef ::lkh_mtsp_solver::SolveMTSPRequest_<std::allocator<void> > SolveMTSPRequest;

typedef boost::shared_ptr< ::lkh_mtsp_solver::SolveMTSPRequest > SolveMTSPRequestPtr;
typedef boost::shared_ptr< ::lkh_mtsp_solver::SolveMTSPRequest const> SolveMTSPRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator1> & lhs, const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator2> & rhs)
{
  return lhs.prob == rhs.prob;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator1> & lhs, const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lkh_mtsp_solver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca63bb73dd5f229cb918a86ba798421f";
  }

  static const char* value(const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca63bb73dd5f229cULL;
  static const uint64_t static_value2 = 0xb918a86ba798421fULL;
};

template<class ContainerAllocator>
struct DataType< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lkh_mtsp_solver/SolveMTSPRequest";
  }

  static const char* value(const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 prob\n"
;
  }

  static const char* value(const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SolveMTSPRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lkh_mtsp_solver::SolveMTSPRequest_<ContainerAllocator>& v)
  {
    s << indent << "prob: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.prob);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LKH_MTSP_SOLVER_MESSAGE_SOLVEMTSPREQUEST_H
