// Generated by gencpp from file plan_env/ChunkData.msg
// DO NOT EDIT!


#ifndef PLAN_ENV_MESSAGE_CHUNKDATA_H
#define PLAN_ENV_MESSAGE_CHUNKDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_env
{
template <class ContainerAllocator>
struct ChunkData_
{
  typedef ChunkData_<ContainerAllocator> Type;

  ChunkData_()
    : from_drone_id(0)
    , to_drone_id(0)
    , chunk_drone_id(0)
    , voxel_adrs()
    , voxel_occ_()
    , idx(0)
    , latest_idx(0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)  {
    }
  ChunkData_(const ContainerAllocator& _alloc)
    : from_drone_id(0)
    , to_drone_id(0)
    , chunk_drone_id(0)
    , voxel_adrs(_alloc)
    , voxel_occ_(_alloc)
    , idx(0)
    , latest_idx(0)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _from_drone_id_type;
  _from_drone_id_type from_drone_id;

   typedef int32_t _to_drone_id_type;
  _to_drone_id_type to_drone_id;

   typedef int32_t _chunk_drone_id_type;
  _chunk_drone_id_type chunk_drone_id;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _voxel_adrs_type;
  _voxel_adrs_type voxel_adrs;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _voxel_occ__type;
  _voxel_occ__type voxel_occ_;

   typedef uint32_t _idx_type;
  _idx_type idx;

   typedef uint32_t _latest_idx_type;
  _latest_idx_type latest_idx;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _pos_z_type;
  _pos_z_type pos_z;





  typedef boost::shared_ptr< ::plan_env::ChunkData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_env::ChunkData_<ContainerAllocator> const> ConstPtr;

}; // struct ChunkData_

typedef ::plan_env::ChunkData_<std::allocator<void> > ChunkData;

typedef boost::shared_ptr< ::plan_env::ChunkData > ChunkDataPtr;
typedef boost::shared_ptr< ::plan_env::ChunkData const> ChunkDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_env::ChunkData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_env::ChunkData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plan_env::ChunkData_<ContainerAllocator1> & lhs, const ::plan_env::ChunkData_<ContainerAllocator2> & rhs)
{
  return lhs.from_drone_id == rhs.from_drone_id &&
    lhs.to_drone_id == rhs.to_drone_id &&
    lhs.chunk_drone_id == rhs.chunk_drone_id &&
    lhs.voxel_adrs == rhs.voxel_adrs &&
    lhs.voxel_occ_ == rhs.voxel_occ_ &&
    lhs.idx == rhs.idx &&
    lhs.latest_idx == rhs.latest_idx &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_z == rhs.pos_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plan_env::ChunkData_<ContainerAllocator1> & lhs, const ::plan_env::ChunkData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plan_env

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plan_env::ChunkData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_env::ChunkData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_env::ChunkData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_env::ChunkData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_env::ChunkData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_env::ChunkData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_env::ChunkData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb59f4568c081139a74132003cbc6f30";
  }

  static const char* value(const ::plan_env::ChunkData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb59f4568c081139ULL;
  static const uint64_t static_value2 = 0xa74132003cbc6f30ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_env::ChunkData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_env/ChunkData";
  }

  static const char* value(const ::plan_env::ChunkData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_env::ChunkData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 from_drone_id\n"
"int32 to_drone_id\n"
"int32 chunk_drone_id\n"
"\n"
"uint32[] voxel_adrs\n"
"uint8[] voxel_occ_\n"
"uint32 idx\n"
"\n"
"# Simulate swarm communication\n"
"uint32 latest_idx\n"
"float64 pos_x\n"
"float64 pos_y\n"
"float64 pos_z\n"
;
  }

  static const char* value(const ::plan_env::ChunkData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_env::ChunkData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.from_drone_id);
      stream.next(m.to_drone_id);
      stream.next(m.chunk_drone_id);
      stream.next(m.voxel_adrs);
      stream.next(m.voxel_occ_);
      stream.next(m.idx);
      stream.next(m.latest_idx);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChunkData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_env::ChunkData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_env::ChunkData_<ContainerAllocator>& v)
  {
    s << indent << "from_drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.from_drone_id);
    s << indent << "to_drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.to_drone_id);
    s << indent << "chunk_drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.chunk_drone_id);
    s << indent << "voxel_adrs[]" << std::endl;
    for (size_t i = 0; i < v.voxel_adrs.size(); ++i)
    {
      s << indent << "  voxel_adrs[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.voxel_adrs[i]);
    }
    s << indent << "voxel_occ_[]" << std::endl;
    for (size_t i = 0; i < v.voxel_occ_.size(); ++i)
    {
      s << indent << "  voxel_occ_[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.voxel_occ_[i]);
    }
    s << indent << "idx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.idx);
    s << indent << "latest_idx: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.latest_idx);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<double>::stream(s, indent + "  ", v.pos_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_ENV_MESSAGE_CHUNKDATA_H
